# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui/settingsWizardUI.ui'
#
# Created by: PyQt5 UI code generator 5.13.0
#
# WARNING! All changes made in this file will be lost!


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Wizard(object):
    def setupUi(self, Wizard):
        Wizard.setObjectName("Wizard")
        Wizard.resize(715, 588)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Wizard.sizePolicy().hasHeightForWidth())
        Wizard.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        Wizard.setFont(font)
        Wizard.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        Wizard.setOptions(QtWidgets.QWizard.HaveHelpButton|QtWidgets.QWizard.NoBackButtonOnStartPage|QtWidgets.QWizard.NoDefaultButton)
        self.intro_page = QtWidgets.QWizardPage()
        self.intro_page.setAutoFillBackground(False)
        self.intro_page.setObjectName("intro_page")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.intro_page)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.label_32 = QtWidgets.QLabel(self.intro_page)
        self.label_32.setWordWrap(True)
        self.label_32.setObjectName("label_32")
        self.verticalLayout_7.addWidget(self.label_32)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_7.addItem(spacerItem)
        self.pushButton_selectExampleImage = QtWidgets.QPushButton(self.intro_page)
        self.pushButton_selectExampleImage.setObjectName("pushButton_selectExampleImage")
        self.verticalLayout_7.addWidget(self.pushButton_selectExampleImage)
        self.label_loadedExampleFile = QtWidgets.QLabel(self.intro_page)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_loadedExampleFile.setFont(font)
        self.label_loadedExampleFile.setText("")
        self.label_loadedExampleFile.setObjectName("label_loadedExampleFile")
        self.verticalLayout_7.addWidget(self.label_loadedExampleFile)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_7.addItem(spacerItem1)
        Wizard.addPage(self.intro_page)
        self.path_setup_page = QtWidgets.QWizardPage()
        self.path_setup_page.setObjectName("path_setup_page")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.path_setup_page)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_3 = QtWidgets.QLabel(self.path_setup_page)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setWordWrap(True)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_6.addWidget(self.label_3)
        self.monitor_scrollArea = QtWidgets.QScrollArea(self.path_setup_page)
        self.monitor_scrollArea.setWidgetResizable(True)
        self.monitor_scrollArea.setObjectName("monitor_scrollArea")
        self.scrollAreaWidgetContents_4 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_4.setGeometry(QtCore.QRect(0, 0, 669, 374))
        self.scrollAreaWidgetContents_4.setObjectName("scrollAreaWidgetContents_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_4)
        self.verticalLayout_3.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.group_inputSettings = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_4)
        self.group_inputSettings.setCheckable(False)
        self.group_inputSettings.setObjectName("group_inputSettings")
        self.gridLayout_11 = QtWidgets.QGridLayout(self.group_inputSettings)
        self.gridLayout_11.setContentsMargins(3, 3, 3, 3)
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.lineEdit_inputPath = QtWidgets.QLineEdit(self.group_inputSettings)
        self.lineEdit_inputPath.setEnabled(False)
        self.lineEdit_inputPath.setObjectName("lineEdit_inputPath")
        self.gridLayout_11.addWidget(self.lineEdit_inputPath, 0, 1, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.group_inputSettings)
        self.label_6.setObjectName("label_6")
        self.gridLayout_11.addWidget(self.label_6, 0, 0, 1, 1)
        self.pushButton_inputPath = QtWidgets.QPushButton(self.group_inputSettings)
        self.pushButton_inputPath.setObjectName("pushButton_inputPath")
        self.gridLayout_11.addWidget(self.pushButton_inputPath, 0, 2, 1, 1)
        self.verticalLayout_3.addWidget(self.group_inputSettings)
        self.group_saveProcessedJpg = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_4)
        self.group_saveProcessedJpg.setCheckable(True)
        self.group_saveProcessedJpg.setObjectName("group_saveProcessedJpg")
        self.gridLayout_13 = QtWidgets.QGridLayout(self.group_saveProcessedJpg)
        self.gridLayout_13.setContentsMargins(3, 3, 3, 3)
        self.gridLayout_13.setObjectName("gridLayout_13")
        self.label_9 = QtWidgets.QLabel(self.group_saveProcessedJpg)
        self.label_9.setObjectName("label_9")
        self.gridLayout_13.addWidget(self.label_9, 1, 0, 1, 1)
        self.lineEdit_pathProcessedJpg = QtWidgets.QLineEdit(self.group_saveProcessedJpg)
        self.lineEdit_pathProcessedJpg.setEnabled(False)
        self.lineEdit_pathProcessedJpg.setObjectName("lineEdit_pathProcessedJpg")
        self.gridLayout_13.addWidget(self.lineEdit_pathProcessedJpg, 1, 1, 1, 1)
        self.pushButton_pathProcessedJpg = QtWidgets.QPushButton(self.group_saveProcessedJpg)
        self.pushButton_pathProcessedJpg.setObjectName("pushButton_pathProcessedJpg")
        self.gridLayout_13.addWidget(self.pushButton_pathProcessedJpg, 1, 2, 1, 1)
        self.label_11 = QtWidgets.QLabel(self.group_saveProcessedJpg)
        self.label_11.setObjectName("label_11")
        self.gridLayout_13.addWidget(self.label_11, 0, 0, 1, 3)
        self.verticalLayout_3.addWidget(self.group_saveProcessedJpg)
        self.group_keepUnalteredRaw = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_4)
        self.group_keepUnalteredRaw.setCheckable(True)
        self.group_keepUnalteredRaw.setChecked(False)
        self.group_keepUnalteredRaw.setObjectName("group_keepUnalteredRaw")
        self.gridLayout_12 = QtWidgets.QGridLayout(self.group_keepUnalteredRaw)
        self.gridLayout_12.setContentsMargins(3, 3, 3, 3)
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.label_7 = QtWidgets.QLabel(self.group_keepUnalteredRaw)
        self.label_7.setObjectName("label_7")
        self.gridLayout_12.addWidget(self.label_7, 1, 0, 1, 1)
        self.lineEdit_pathUnalteredRaw = QtWidgets.QLineEdit(self.group_keepUnalteredRaw)
        self.lineEdit_pathUnalteredRaw.setEnabled(False)
        self.lineEdit_pathUnalteredRaw.setObjectName("lineEdit_pathUnalteredRaw")
        self.gridLayout_12.addWidget(self.lineEdit_pathUnalteredRaw, 1, 1, 1, 1)
        self.pushButton_pathUnalteredRaw = QtWidgets.QPushButton(self.group_keepUnalteredRaw)
        self.pushButton_pathUnalteredRaw.setObjectName("pushButton_pathUnalteredRaw")
        self.gridLayout_12.addWidget(self.pushButton_pathUnalteredRaw, 1, 2, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.group_keepUnalteredRaw)
        self.label_4.setObjectName("label_4")
        self.gridLayout_12.addWidget(self.label_4, 0, 0, 1, 3)
        self.verticalLayout_3.addWidget(self.group_keepUnalteredRaw)
        self.group_saveProcessedTIFF = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_4)
        self.group_saveProcessedTIFF.setEnabled(True)
        self.group_saveProcessedTIFF.setCheckable(True)
        self.group_saveProcessedTIFF.setChecked(False)
        self.group_saveProcessedTIFF.setObjectName("group_saveProcessedTIFF")
        self.gridLayout_14 = QtWidgets.QGridLayout(self.group_saveProcessedTIFF)
        self.gridLayout_14.setContentsMargins(3, 3, 3, 3)
        self.gridLayout_14.setObjectName("gridLayout_14")
        self.lineEdit_pathProcessedTIFF = QtWidgets.QLineEdit(self.group_saveProcessedTIFF)
        self.lineEdit_pathProcessedTIFF.setEnabled(False)
        self.lineEdit_pathProcessedTIFF.setObjectName("lineEdit_pathProcessedTIFF")
        self.gridLayout_14.addWidget(self.lineEdit_pathProcessedTIFF, 1, 1, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.group_saveProcessedTIFF)
        self.label_8.setObjectName("label_8")
        self.gridLayout_14.addWidget(self.label_8, 1, 0, 1, 1)
        self.pushButton_pathProcessedTIFF = QtWidgets.QPushButton(self.group_saveProcessedTIFF)
        self.pushButton_pathProcessedTIFF.setObjectName("pushButton_pathProcessedTIFF")
        self.gridLayout_14.addWidget(self.pushButton_pathProcessedTIFF, 1, 2, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.group_saveProcessedTIFF)
        self.label_5.setObjectName("label_5")
        self.gridLayout_14.addWidget(self.label_5, 0, 0, 1, 3)
        self.verticalLayout_3.addWidget(self.group_saveProcessedTIFF)
        self.monitor_scrollArea.setWidget(self.scrollAreaWidgetContents_4)
        self.verticalLayout_6.addWidget(self.monitor_scrollArea)
        Wizard.addPage(self.path_setup_page)
        self.bcRead_setup_page = QtWidgets.QWizardPage()
        self.bcRead_setup_page.setObjectName("bcRead_setup_page")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.bcRead_setup_page)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_16 = QtWidgets.QLabel(self.bcRead_setup_page)
        self.label_16.setWordWrap(True)
        self.label_16.setObjectName("label_16")
        self.verticalLayout.addWidget(self.label_16)
        self.group_barcodeDetection = QtWidgets.QGroupBox(self.bcRead_setup_page)
        self.group_barcodeDetection.setAutoFillBackground(False)
        self.group_barcodeDetection.setFlat(False)
        self.group_barcodeDetection.setCheckable(False)
        self.group_barcodeDetection.setObjectName("group_barcodeDetection")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.group_barcodeDetection)
        self.gridLayout_6.setContentsMargins(3, 3, 3, 3)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.group_renameByBarcode = QtWidgets.QGroupBox(self.group_barcodeDetection)
        self.group_renameByBarcode.setEnabled(True)
        self.group_renameByBarcode.setCheckable(True)
        self.group_renameByBarcode.setChecked(True)
        self.group_renameByBarcode.setObjectName("group_renameByBarcode")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.group_renameByBarcode)
        self.gridLayout_3.setContentsMargins(3, 3, 3, 3)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_catalogNumberPrefix = QtWidgets.QLabel(self.group_renameByBarcode)
        self.label_catalogNumberPrefix.setEnabled(True)
        self.label_catalogNumberPrefix.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_catalogNumberPrefix.setObjectName("label_catalogNumberPrefix")
        self.gridLayout_3.addWidget(self.label_catalogNumberPrefix, 2, 0, 1, 1)
        self.label_25 = QtWidgets.QLabel(self.group_renameByBarcode)
        self.label_25.setEnabled(True)
        self.label_25.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_25.setObjectName("label_25")
        self.gridLayout_3.addWidget(self.label_25, 0, 0, 1, 1)
        self.label_dupNamingPolicy = QtWidgets.QLabel(self.group_renameByBarcode)
        self.label_dupNamingPolicy.setEnabled(True)
        self.label_dupNamingPolicy.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_dupNamingPolicy.setObjectName("label_dupNamingPolicy")
        self.gridLayout_3.addWidget(self.label_dupNamingPolicy, 3, 0, 1, 1)
        self.lineEdit_catalogNumberPrefix = QtWidgets.QLineEdit(self.group_renameByBarcode)
        self.lineEdit_catalogNumberPrefix.setEnabled(True)
        self.lineEdit_catalogNumberPrefix.setObjectName("lineEdit_catalogNumberPrefix")
        self.gridLayout_3.addWidget(self.lineEdit_catalogNumberPrefix, 2, 1, 1, 1)
        self.frame_patterns = QtWidgets.QFrame(self.group_renameByBarcode)
        self.frame_patterns.setEnabled(True)
        self.frame_patterns.setObjectName("frame_patterns")
        self.gridLayout_18 = QtWidgets.QGridLayout(self.frame_patterns)
        self.gridLayout_18.setContentsMargins(-1, 0, -1, 0)
        self.gridLayout_18.setObjectName("gridLayout_18")
        self.toolButton_removePattern = QtWidgets.QToolButton(self.frame_patterns)
        self.toolButton_removePattern.setEnabled(True)
        self.toolButton_removePattern.setCheckable(False)
        self.toolButton_removePattern.setAutoRaise(False)
        self.toolButton_removePattern.setObjectName("toolButton_removePattern")
        self.gridLayout_18.addWidget(self.toolButton_removePattern, 4, 2, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_18.addItem(spacerItem2, 4, 1, 1, 1)
        self.listWidget_patterns = QtWidgets.QListWidget(self.frame_patterns)
        self.listWidget_patterns.setEnabled(True)
        self.listWidget_patterns.setAutoScroll(False)
        self.listWidget_patterns.setSelectionRectVisible(False)
        self.listWidget_patterns.setObjectName("listWidget_patterns")
        self.gridLayout_18.addWidget(self.listWidget_patterns, 1, 0, 1, 3)
        self.gridLayout_3.addWidget(self.frame_patterns, 2, 7, 4, 1)
        self.label_dupPreviewDisplay = QtWidgets.QLabel(self.group_renameByBarcode)
        self.label_dupPreviewDisplay.setEnabled(True)
        self.label_dupPreviewDisplay.setText("")
        self.label_dupPreviewDisplay.setObjectName("label_dupPreviewDisplay")
        self.gridLayout_3.addWidget(self.label_dupPreviewDisplay, 4, 1, 1, 3)
        self.label_dupPreview = QtWidgets.QLabel(self.group_renameByBarcode)
        self.label_dupPreview.setEnabled(True)
        self.label_dupPreview.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_dupPreview.setObjectName("label_dupPreview")
        self.gridLayout_3.addWidget(self.label_dupPreview, 4, 0, 1, 1)
        self.comboBox_dupNamingPolicy = QtWidgets.QComboBox(self.group_renameByBarcode)
        self.comboBox_dupNamingPolicy.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_dupNamingPolicy.sizePolicy().hasHeightForWidth())
        self.comboBox_dupNamingPolicy.setSizePolicy(sizePolicy)
        self.comboBox_dupNamingPolicy.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToMinimumContentsLength)
        self.comboBox_dupNamingPolicy.setObjectName("comboBox_dupNamingPolicy")
        self.comboBox_dupNamingPolicy.addItem("")
        self.comboBox_dupNamingPolicy.addItem("")
        self.comboBox_dupNamingPolicy.addItem("")
        self.comboBox_dupNamingPolicy.addItem("")
        self.gridLayout_3.addWidget(self.comboBox_dupNamingPolicy, 3, 1, 1, 3)
        self.spinBox_catalogDigits = QtWidgets.QSpinBox(self.group_renameByBarcode)
        self.spinBox_catalogDigits.setEnabled(True)
        self.spinBox_catalogDigits.setFrame(True)
        self.spinBox_catalogDigits.setMinimum(0)
        self.spinBox_catalogDigits.setObjectName("spinBox_catalogDigits")
        self.gridLayout_3.addWidget(self.spinBox_catalogDigits, 2, 3, 1, 1)
        self.label_28 = QtWidgets.QLabel(self.group_renameByBarcode)
        self.label_28.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setItalic(True)
        self.label_28.setFont(font)
        self.label_28.setAlignment(QtCore.Qt.AlignCenter)
        self.label_28.setObjectName("label_28")
        self.gridLayout_3.addWidget(self.label_28, 0, 7, 1, 1)
        self.comboBox_bcBackend = QtWidgets.QComboBox(self.group_renameByBarcode)
        self.comboBox_bcBackend.setEnabled(True)
        self.comboBox_bcBackend.setObjectName("comboBox_bcBackend")
        self.comboBox_bcBackend.addItem("")
        self.comboBox_bcBackend.addItem("")
        self.gridLayout_3.addWidget(self.comboBox_bcBackend, 0, 1, 1, 3)
        self.label_digits = QtWidgets.QLabel(self.group_renameByBarcode)
        self.label_digits.setEnabled(True)
        self.label_digits.setObjectName("label_digits")
        self.gridLayout_3.addWidget(self.label_digits, 2, 2, 1, 1)
        self.toolButton_addPattern = QtWidgets.QToolButton(self.group_renameByBarcode)
        self.toolButton_addPattern.setEnabled(True)
        self.toolButton_addPattern.setObjectName("toolButton_addPattern")
        self.gridLayout_3.addWidget(self.toolButton_addPattern, 5, 1, 1, 2)
        self.gridLayout_6.addWidget(self.group_renameByBarcode, 1, 0, 1, 2)
        self.pushButton_testbcRead = QtWidgets.QPushButton(self.group_barcodeDetection)
        self.pushButton_testbcRead.setEnabled(False)
        self.pushButton_testbcRead.setObjectName("pushButton_testbcRead")
        self.gridLayout_6.addWidget(self.pushButton_testbcRead, 2, 0, 1, 1)
        self.label_bcRead_results = QtWidgets.QLabel(self.group_barcodeDetection)
        self.label_bcRead_results.setText("")
        self.label_bcRead_results.setAlignment(QtCore.Qt.AlignCenter)
        self.label_bcRead_results.setWordWrap(True)
        self.label_bcRead_results.setObjectName("label_bcRead_results")
        self.gridLayout_6.addWidget(self.label_bcRead_results, 2, 1, 1, 1)
        self.group_renameByBarcode.raise_()
        self.label_bcRead_results.raise_()
        self.pushButton_testbcRead.raise_()
        self.verticalLayout.addWidget(self.group_barcodeDetection)
        Wizard.addPage(self.bcRead_setup_page)
        self.blurDetect_setup_page = QtWidgets.QWizardPage()
        self.blurDetect_setup_page.setObjectName("blurDetect_setup_page")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.blurDetect_setup_page)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_18 = QtWidgets.QLabel(self.blurDetect_setup_page)
        self.label_18.setWordWrap(True)
        self.label_18.setObjectName("label_18")
        self.verticalLayout_2.addWidget(self.label_18)
        self.group_blurDetection = QtWidgets.QFrame(self.blurDetect_setup_page)
        self.group_blurDetection.setObjectName("group_blurDetection")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.group_blurDetection)
        self.gridLayout_8.setContentsMargins(3, 3, 3, 3)
        self.gridLayout_8.setObjectName("gridLayout_8")
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_8.addItem(spacerItem3, 3, 3, 1, 1)
        self.pushButton_testBlurDetection = QtWidgets.QPushButton(self.group_blurDetection)
        self.pushButton_testBlurDetection.setEnabled(False)
        self.pushButton_testBlurDetection.setObjectName("pushButton_testBlurDetection")
        self.gridLayout_8.addWidget(self.pushButton_testBlurDetection, 3, 0, 1, 2, QtCore.Qt.AlignBottom)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_8.addItem(spacerItem4, 1, 2, 1, 1)
        self.label_blurDetect_results = QtWidgets.QLabel(self.group_blurDetection)
        self.label_blurDetect_results.setText("")
        self.label_blurDetect_results.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft)
        self.label_blurDetect_results.setWordWrap(True)
        self.label_blurDetect_results.setObjectName("label_blurDetect_results")
        self.gridLayout_8.addWidget(self.label_blurDetect_results, 3, 2, 1, 1)
        self.checkBox_blurDetection = QtWidgets.QCheckBox(self.group_blurDetection)
        self.checkBox_blurDetection.setChecked(True)
        self.checkBox_blurDetection.setObjectName("checkBox_blurDetection")
        self.gridLayout_8.addWidget(self.checkBox_blurDetection, 0, 0, 1, 1)
        self.doubleSpinBox_blurThreshold = QtWidgets.QDoubleSpinBox(self.group_blurDetection)
        self.doubleSpinBox_blurThreshold.setEnabled(True)
        self.doubleSpinBox_blurThreshold.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.doubleSpinBox_blurThreshold.setDecimals(3)
        self.doubleSpinBox_blurThreshold.setMinimum(0.001)
        self.doubleSpinBox_blurThreshold.setMaximum(9.99)
        self.doubleSpinBox_blurThreshold.setSingleStep(0.001)
        self.doubleSpinBox_blurThreshold.setProperty("value", 0.045)
        self.doubleSpinBox_blurThreshold.setObjectName("doubleSpinBox_blurThreshold")
        self.gridLayout_8.addWidget(self.doubleSpinBox_blurThreshold, 1, 1, 1, 1)
        self.label_13 = QtWidgets.QLabel(self.group_blurDetection)
        self.label_13.setEnabled(True)
        self.label_13.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_13.setObjectName("label_13")
        self.gridLayout_8.addWidget(self.label_13, 1, 0, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_8.addItem(spacerItem5, 2, 0, 1, 1)
        self.gridLayout_8.setColumnStretch(0, 1)
        self.gridLayout_8.setColumnStretch(1, 1)
        self.gridLayout_8.setColumnStretch(2, 1)
        self.verticalLayout_2.addWidget(self.group_blurDetection)
        Wizard.addPage(self.blurDetect_setup_page)
        self.ccRead_setup_page1 = QtWidgets.QWizardPage()
        self.ccRead_setup_page1.setObjectName("ccRead_setup_page1")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.ccRead_setup_page1)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.pushButton_testCRCDetection = QtWidgets.QPushButton(self.ccRead_setup_page1)
        self.pushButton_testCRCDetection.setEnabled(False)
        self.pushButton_testCRCDetection.setObjectName("pushButton_testCRCDetection")
        self.gridLayout_9.addWidget(self.pushButton_testCRCDetection, 7, 1, 1, 1)
        self.label_24 = QtWidgets.QLabel(self.ccRead_setup_page1)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_24.setFont(font)
        self.label_24.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignHCenter)
        self.label_24.setObjectName("label_24")
        self.gridLayout_9.addWidget(self.label_24, 0, 2, 1, 1)
        self.label_crcDetection_results = QtWidgets.QLabel(self.ccRead_setup_page1)
        self.label_crcDetection_results.setText("")
        self.label_crcDetection_results.setObjectName("label_crcDetection_results")
        self.gridLayout_9.addWidget(self.label_crcDetection_results, 8, 1, 1, 1)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.comboBox_crcType = QtWidgets.QComboBox(self.ccRead_setup_page1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_crcType.sizePolicy().hasHeightForWidth())
        self.comboBox_crcType.setSizePolicy(sizePolicy)
        self.comboBox_crcType.setObjectName("comboBox_crcType")
        self.comboBox_crcType.addItem("")
        self.comboBox_crcType.addItem("")
        self.comboBox_crcType.addItem("")
        self.comboBox_crcType.addItem("")
        self.comboBox_crcType.addItem("")
        self.gridLayout_2.addWidget(self.comboBox_crcType, 0, 1, 1, 1)
        self.label_26 = QtWidgets.QLabel(self.ccRead_setup_page1)
        self.label_26.setObjectName("label_26")
        self.gridLayout_2.addWidget(self.label_26, 0, 0, 1, 1)
        self.gridLayout_9.addLayout(self.gridLayout_2, 2, 1, 1, 1)
        self.pushButton_selectExampleImage_1 = QtWidgets.QPushButton(self.ccRead_setup_page1)
        self.pushButton_selectExampleImage_1.setObjectName("pushButton_selectExampleImage_1")
        self.gridLayout_9.addWidget(self.pushButton_selectExampleImage_1, 5, 1, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_9.addItem(spacerItem6, 4, 1, 1, 1)
        self.crc_canvas_cont = QtWidgets.QFrame(self.ccRead_setup_page1)
        self.crc_canvas_cont.setMinimumSize(QtCore.QSize(254, 343))
        self.crc_canvas_cont.setMaximumSize(QtCore.QSize(254, 343))
        self.crc_canvas_cont.setObjectName("crc_canvas_cont")
        self.crc_canvas_layout = QtWidgets.QVBoxLayout(self.crc_canvas_cont)
        self.crc_canvas_layout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.crc_canvas_layout.setObjectName("crc_canvas_layout")
        self.gridLayout_9.addWidget(self.crc_canvas_cont, 1, 2, 9, 1)
        self.label_33 = QtWidgets.QLabel(self.ccRead_setup_page1)
        self.label_33.setWordWrap(True)
        self.label_33.setObjectName("label_33")
        self.gridLayout_9.addWidget(self.label_33, 0, 1, 2, 1)
        self.label_loadedExampleFile_1 = QtWidgets.QLabel(self.ccRead_setup_page1)
        self.label_loadedExampleFile_1.setText("")
        self.label_loadedExampleFile_1.setObjectName("label_loadedExampleFile_1")
        self.gridLayout_9.addWidget(self.label_loadedExampleFile_1, 6, 1, 1, 1)
        self.gridLayout_9.setColumnStretch(0, 1)
        self.gridLayout_9.setColumnStretch(1, 1)
        Wizard.addPage(self.ccRead_setup_page1)
        self.ccRead_setup_page2 = QtWidgets.QWizardPage()
        self.ccRead_setup_page2.setObjectName("ccRead_setup_page2")
        self.gridLayout = QtWidgets.QGridLayout(self.ccRead_setup_page2)
        self.gridLayout.setObjectName("gridLayout")
        self.label_19 = QtWidgets.QLabel(self.ccRead_setup_page2)
        self.label_19.setWordWrap(True)
        self.label_19.setObjectName("label_19")
        self.gridLayout.addWidget(self.label_19, 0, 0, 1, 2)
        self.gridLayout_20 = QtWidgets.QGridLayout()
        self.gridLayout_20.setObjectName("gridLayout_20")
        self.pushButton_test_scaleDet = QtWidgets.QPushButton(self.ccRead_setup_page2)
        self.pushButton_test_scaleDet.setEnabled(False)
        self.pushButton_test_scaleDet.setObjectName("pushButton_test_scaleDet")
        self.gridLayout_20.addWidget(self.pushButton_test_scaleDet, 0, 0, 1, 1)
        self.label_whiteBalance_results = QtWidgets.QLabel(self.ccRead_setup_page2)
        self.label_whiteBalance_results.setText("")
        self.label_whiteBalance_results.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft)
        self.label_whiteBalance_results.setWordWrap(True)
        self.label_whiteBalance_results.setObjectName("label_whiteBalance_results")
        self.gridLayout_20.addWidget(self.label_whiteBalance_results, 1, 1, 1, 1)
        self.pushButton_test_whiteBalance = QtWidgets.QPushButton(self.ccRead_setup_page2)
        self.pushButton_test_whiteBalance.setEnabled(False)
        self.pushButton_test_whiteBalance.setObjectName("pushButton_test_whiteBalance")
        self.gridLayout_20.addWidget(self.pushButton_test_whiteBalance, 1, 0, 1, 1)
        self.label_scaleDet_results = QtWidgets.QLabel(self.ccRead_setup_page2)
        self.label_scaleDet_results.setText("")
        self.label_scaleDet_results.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft)
        self.label_scaleDet_results.setWordWrap(True)
        self.label_scaleDet_results.setObjectName("label_scaleDet_results")
        self.gridLayout_20.addWidget(self.label_scaleDet_results, 0, 1, 1, 1)
        self.gridLayout.addLayout(self.gridLayout_20, 6, 0, 1, 1)
        self.checkBox_scaleDetermination = QtWidgets.QCheckBox(self.ccRead_setup_page2)
        self.checkBox_scaleDetermination.setChecked(True)
        self.checkBox_scaleDetermination.setObjectName("checkBox_scaleDetermination")
        self.gridLayout.addWidget(self.checkBox_scaleDetermination, 1, 0, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem7, 5, 0, 1, 1)
        self.checkBox_performWhiteBalance = QtWidgets.QCheckBox(self.ccRead_setup_page2)
        self.checkBox_performWhiteBalance.setChecked(True)
        self.checkBox_performWhiteBalance.setObjectName("checkBox_performWhiteBalance")
        self.gridLayout.addWidget(self.checkBox_performWhiteBalance, 2, 0, 1, 1)
        self.group_verifyRotation = QtWidgets.QGroupBox(self.ccRead_setup_page2)
        self.group_verifyRotation.setEnabled(True)
        self.group_verifyRotation.setCheckable(True)
        self.group_verifyRotation.setChecked(True)
        self.group_verifyRotation.setObjectName("group_verifyRotation")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.group_verifyRotation)
        self.gridLayout_5.setContentsMargins(3, 3, 3, 3)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.label_colorCheckerPosition = QtWidgets.QLabel(self.group_verifyRotation)
        self.label_colorCheckerPosition.setEnabled(True)
        self.label_colorCheckerPosition.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_colorCheckerPosition.setObjectName("label_colorCheckerPosition")
        self.gridLayout_5.addWidget(self.label_colorCheckerPosition, 0, 0, 1, 1)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem8, 0, 2, 1, 1)
        self.comboBox_colorCheckerPosition = QtWidgets.QComboBox(self.group_verifyRotation)
        self.comboBox_colorCheckerPosition.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_colorCheckerPosition.sizePolicy().hasHeightForWidth())
        self.comboBox_colorCheckerPosition.setSizePolicy(sizePolicy)
        self.comboBox_colorCheckerPosition.setObjectName("comboBox_colorCheckerPosition")
        self.comboBox_colorCheckerPosition.addItem("")
        self.comboBox_colorCheckerPosition.addItem("")
        self.comboBox_colorCheckerPosition.addItem("")
        self.comboBox_colorCheckerPosition.addItem("")
        self.gridLayout_5.addWidget(self.comboBox_colorCheckerPosition, 0, 1, 1, 1)
        self.gridLayout.addWidget(self.group_verifyRotation, 3, 0, 1, 2)
        self.gridLayout.setColumnStretch(0, 1)
        Wizard.addPage(self.ccRead_setup_page2)
        self.eqRead_setup_page = QtWidgets.QWizardPage()
        self.eqRead_setup_page.setObjectName("eqRead_setup_page")
        self.gridLayout_17 = QtWidgets.QGridLayout(self.eqRead_setup_page)
        self.gridLayout_17.setObjectName("gridLayout_17")
        self.label_21 = QtWidgets.QLabel(self.eqRead_setup_page)
        self.label_21.setWordWrap(True)
        self.label_21.setObjectName("label_21")
        self.gridLayout_17.addWidget(self.label_21, 0, 0, 1, 1)
        self.group_equipmentDetection = QtWidgets.QGroupBox(self.eqRead_setup_page)
        self.group_equipmentDetection.setEnabled(True)
        self.group_equipmentDetection.setCheckable(False)
        self.group_equipmentDetection.setObjectName("group_equipmentDetection")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.group_equipmentDetection)
        self.gridLayout_7.setContentsMargins(3, 3, 3, 3)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_2 = QtWidgets.QLabel(self.group_equipmentDetection)
        self.label_2.setEnabled(True)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.doubleSpinBox_focalDistance = QtWidgets.QDoubleSpinBox(self.group_equipmentDetection)
        self.doubleSpinBox_focalDistance.setEnabled(True)
        self.doubleSpinBox_focalDistance.setMinimum(10.0)
        self.doubleSpinBox_focalDistance.setMaximum(999.99)
        self.doubleSpinBox_focalDistance.setProperty("value", 25.5)
        self.doubleSpinBox_focalDistance.setObjectName("doubleSpinBox_focalDistance")
        self.horizontalLayout.addWidget(self.doubleSpinBox_focalDistance)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem9)
        self.gridLayout_7.addLayout(self.horizontalLayout, 4, 1, 1, 1)
        self.checkBox_lensCorrection = QtWidgets.QCheckBox(self.group_equipmentDetection)
        self.checkBox_lensCorrection.setEnabled(True)
        self.checkBox_lensCorrection.setChecked(True)
        self.checkBox_lensCorrection.setObjectName("checkBox_lensCorrection")
        self.gridLayout_7.addWidget(self.checkBox_lensCorrection, 4, 0, 1, 1)
        self.gridLayout_17.addWidget(self.group_equipmentDetection, 1, 0, 1, 1)
        self.gridLayout_16 = QtWidgets.QGridLayout()
        self.gridLayout_16.setObjectName("gridLayout_16")
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_16.addItem(spacerItem10, 2, 2, 1, 1)
        self.pushButton_testeqRead = QtWidgets.QPushButton(self.eqRead_setup_page)
        self.pushButton_testeqRead.setEnabled(False)
        self.pushButton_testeqRead.setObjectName("pushButton_testeqRead")
        self.gridLayout_16.addWidget(self.pushButton_testeqRead, 2, 0, 1, 1)
        spacerItem11 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_16.addItem(spacerItem11, 0, 0, 1, 1)
        self.label_eqRead_results = QtWidgets.QLabel(self.eqRead_setup_page)
        self.label_eqRead_results.setText("")
        self.label_eqRead_results.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft)
        self.label_eqRead_results.setWordWrap(True)
        self.label_eqRead_results.setObjectName("label_eqRead_results")
        self.gridLayout_16.addWidget(self.label_eqRead_results, 1, 1, 2, 1)
        self.gridLayout_16.setColumnStretch(0, 1)
        self.gridLayout_16.setColumnStretch(1, 1)
        self.gridLayout_17.addLayout(self.gridLayout_16, 2, 0, 1, 1)
        Wizard.addPage(self.eqRead_setup_page)
        self.metaRead_setup_page = QtWidgets.QWizardPage()
        self.metaRead_setup_page.setObjectName("metaRead_setup_page")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.metaRead_setup_page)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_23 = QtWidgets.QLabel(self.metaRead_setup_page)
        self.label_23.setWordWrap(True)
        self.label_23.setObjectName("label_23")
        self.verticalLayout_5.addWidget(self.label_23)
        self.group_metaDataApplication = QtWidgets.QGroupBox(self.metaRead_setup_page)
        self.group_metaDataApplication.setEnabled(True)
        self.group_metaDataApplication.setTitle("")
        self.group_metaDataApplication.setCheckable(False)
        self.group_metaDataApplication.setObjectName("group_metaDataApplication")
        self.gridLayout_19 = QtWidgets.QGridLayout(self.group_metaDataApplication)
        self.gridLayout_19.setContentsMargins(3, 3, 3, 3)
        self.gridLayout_19.setObjectName("gridLayout_19")
        self.label_copywriteLicense = QtWidgets.QLabel(self.group_metaDataApplication)
        self.label_copywriteLicense.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_copywriteLicense.setObjectName("label_copywriteLicense")
        self.gridLayout_19.addWidget(self.label_copywriteLicense, 4, 0, 1, 1)
        self.label_contactName = QtWidgets.QLabel(self.group_metaDataApplication)
        self.label_contactName.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_contactName.setObjectName("label_contactName")
        self.gridLayout_19.addWidget(self.label_contactName, 2, 0, 1, 1)
        self.plainTextEdit_collectionName = QtWidgets.QPlainTextEdit(self.group_metaDataApplication)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.plainTextEdit_collectionName.sizePolicy().hasHeightForWidth())
        self.plainTextEdit_collectionName.setSizePolicy(sizePolicy)
        self.plainTextEdit_collectionName.setMinimumSize(QtCore.QSize(0, 50))
        self.plainTextEdit_collectionName.setTabChangesFocus(True)
        self.plainTextEdit_collectionName.setObjectName("plainTextEdit_collectionName")
        self.gridLayout_19.addWidget(self.plainTextEdit_collectionName, 0, 1, 1, 1)
        self.label_collectionName = QtWidgets.QLabel(self.group_metaDataApplication)
        self.label_collectionName.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_collectionName.setObjectName("label_collectionName")
        self.gridLayout_19.addWidget(self.label_collectionName, 0, 0, 1, 1)
        self.label_contactEmail = QtWidgets.QLabel(self.group_metaDataApplication)
        self.label_contactEmail.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_contactEmail.setObjectName("label_contactEmail")
        self.gridLayout_19.addWidget(self.label_contactEmail, 3, 0, 1, 1)
        self.plainTextEdit_collectionURL = QtWidgets.QPlainTextEdit(self.group_metaDataApplication)
        self.plainTextEdit_collectionURL.setMinimumSize(QtCore.QSize(0, 50))
        self.plainTextEdit_collectionURL.setInputMethodHints(QtCore.Qt.ImhMultiLine|QtCore.Qt.ImhUrlCharactersOnly)
        self.plainTextEdit_collectionURL.setTabChangesFocus(True)
        self.plainTextEdit_collectionURL.setObjectName("plainTextEdit_collectionURL")
        self.gridLayout_19.addWidget(self.plainTextEdit_collectionURL, 1, 1, 1, 1)
        self.plainTextEdit_contactName = QtWidgets.QPlainTextEdit(self.group_metaDataApplication)
        self.plainTextEdit_contactName.setMinimumSize(QtCore.QSize(0, 50))
        self.plainTextEdit_contactName.setTabChangesFocus(True)
        self.plainTextEdit_contactName.setObjectName("plainTextEdit_contactName")
        self.gridLayout_19.addWidget(self.plainTextEdit_contactName, 2, 1, 1, 1)
        self.plainTextEdit_contactEmail = QtWidgets.QPlainTextEdit(self.group_metaDataApplication)
        self.plainTextEdit_contactEmail.setMinimumSize(QtCore.QSize(0, 50))
        self.plainTextEdit_contactEmail.setInputMethodHints(QtCore.Qt.ImhEmailCharactersOnly|QtCore.Qt.ImhMultiLine)
        self.plainTextEdit_contactEmail.setTabChangesFocus(True)
        self.plainTextEdit_contactEmail.setObjectName("plainTextEdit_contactEmail")
        self.gridLayout_19.addWidget(self.plainTextEdit_contactEmail, 3, 1, 1, 1)
        self.plainTextEdit_copywriteLicense = QtWidgets.QPlainTextEdit(self.group_metaDataApplication)
        self.plainTextEdit_copywriteLicense.setMinimumSize(QtCore.QSize(0, 50))
        self.plainTextEdit_copywriteLicense.setTabChangesFocus(True)
        self.plainTextEdit_copywriteLicense.setObjectName("plainTextEdit_copywriteLicense")
        self.gridLayout_19.addWidget(self.plainTextEdit_copywriteLicense, 4, 1, 1, 1)
        self.label_collectionIURL = QtWidgets.QLabel(self.group_metaDataApplication)
        self.label_collectionIURL.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_collectionIURL.setObjectName("label_collectionIURL")
        self.gridLayout_19.addWidget(self.label_collectionIURL, 1, 0, 1, 1)
        self.verticalLayout_5.addWidget(self.group_metaDataApplication)
        Wizard.addPage(self.metaRead_setup_page)
        self.final_page = QtWidgets.QWizardPage()
        self.final_page.setObjectName("final_page")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.final_page)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.lineEdit_profileName = QtWidgets.QLineEdit(self.final_page)
        self.lineEdit_profileName.setObjectName("lineEdit_profileName")
        self.gridLayout_4.addWidget(self.lineEdit_profileName, 2, 1, 1, 1)
        self.label_14 = QtWidgets.QLabel(self.final_page)
        self.label_14.setObjectName("label_14")
        self.gridLayout_4.addWidget(self.label_14, 5, 0, 1, 1)
        self.label_saveProfile_Results = QtWidgets.QLabel(self.final_page)
        font = QtGui.QFont()
        font.setItalic(True)
        self.label_saveProfile_Results.setFont(font)
        self.label_saveProfile_Results.setText("")
        self.label_saveProfile_Results.setObjectName("label_saveProfile_Results")
        self.gridLayout_4.addWidget(self.label_saveProfile_Results, 3, 2, 1, 1)
        self.scrollArea = QtWidgets.QScrollArea(self.final_page)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 579, 304))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_profileDetails = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_profileDetails.setText("")
        self.label_profileDetails.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft)
        self.label_profileDetails.setWordWrap(True)
        self.label_profileDetails.setObjectName("label_profileDetails")
        self.verticalLayout_4.addWidget(self.label_profileDetails)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout_4.addWidget(self.scrollArea, 4, 1, 2, 2)
        self.label_27 = QtWidgets.QLabel(self.final_page)
        self.label_27.setWordWrap(True)
        self.label_27.setObjectName("label_27")
        self.gridLayout_4.addWidget(self.label_27, 0, 0, 1, 3)
        self.label = QtWidgets.QLabel(self.final_page)
        self.label.setObjectName("label")
        self.gridLayout_4.addWidget(self.label, 2, 0, 1, 1)
        self.pushButton_saveProfile = QtWidgets.QPushButton(self.final_page)
        self.pushButton_saveProfile.setObjectName("pushButton_saveProfile")
        self.gridLayout_4.addWidget(self.pushButton_saveProfile, 3, 1, 1, 1)
        spacerItem12 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_4.addItem(spacerItem12, 1, 1, 1, 1)
        self.label_nameAvailable = QtWidgets.QLabel(self.final_page)
        font = QtGui.QFont()
        font.setItalic(True)
        self.label_nameAvailable.setFont(font)
        self.label_nameAvailable.setText("")
        self.label_nameAvailable.setObjectName("label_nameAvailable")
        self.gridLayout_4.addWidget(self.label_nameAvailable, 2, 2, 1, 1)
        spacerItem13 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem13, 1, 2, 1, 1)
        self.gridLayout_4.setRowStretch(5, 1)
        Wizard.addPage(self.final_page)

        self.retranslateUi(Wizard)
        self.comboBox_bcBackend.setCurrentIndex(1)
        self.comboBox_crcType.setCurrentIndex(1)
        self.pushButton_selectExampleImage.clicked.connect(Wizard.openDisplayImage)
        self.lineEdit_catalogNumberPrefix.textChanged['QString'].connect(Wizard.update_CatalogNumber_Preview)
        self.spinBox_catalogDigits.valueChanged['int'].connect(Wizard.update_CatalogNumber_Preview)
        self.comboBox_dupNamingPolicy.currentTextChanged['QString'].connect(Wizard.update_CatalogNumber_Preview)
        self.toolButton_removePattern.clicked.connect(Wizard.remove_pattern)
        self.toolButton_addPattern.clicked.connect(Wizard.add_pattern)
        self.pushButton_testbcRead.clicked.connect(Wizard.test_bcRead)
        self.pushButton_testBlurDetection.clicked.connect(Wizard.test_blurDetect)
        self.pushButton_testCRCDetection.clicked.connect(Wizard.test_crcDetection)
        self.pushButton_testeqRead.clicked.connect(Wizard.test_eqRead)
        self.pushButton_test_scaleDet.clicked.connect(Wizard.test_scaleRead)
        self.pushButton_test_whiteBalance.clicked.connect(Wizard.test_wbDet)
        self.lineEdit_profileName.textEdited['QString'].connect(Wizard.is_nameAvailable)
        self.pushButton_saveProfile.clicked.connect(Wizard.save_inputs)
        self.pushButton_inputPath.clicked.connect(Wizard.setFolderPath)
        self.pushButton_pathProcessedJpg.clicked.connect(Wizard.setFolderPath)
        self.lineEdit_inputPath.textChanged['QString'].connect(Wizard.emit_completeChanged)
        self.lineEdit_pathProcessedJpg.textChanged['QString'].connect(Wizard.emit_completeChanged)
        self.lineEdit_pathUnalteredRaw.textChanged['QString'].connect(Wizard.emit_completeChanged)
        self.lineEdit_pathProcessedTIFF.textChanged['QString'].connect(Wizard.emit_completeChanged)
        self.group_saveProcessedJpg.toggled['bool'].connect(Wizard.emit_completeChanged)
        self.group_keepUnalteredRaw.toggled['bool'].connect(Wizard.emit_completeChanged)
        self.group_saveProcessedTIFF.toggled['bool'].connect(Wizard.emit_completeChanged)
        self.pushButton_testCRCDetection.toggled['bool'].connect(Wizard.emit_completeChanged)
        self.pushButton_selectExampleImage_1.clicked.connect(Wizard.openDisplayImage)
        QtCore.QMetaObject.connectSlotsByName(Wizard)

    def retranslateUi(self, Wizard):
        _translate = QtCore.QCoreApplication.translate
        Wizard.setWindowTitle(_translate("Wizard", "HerbASAP profile setup"))
        self.intro_page.setTitle(_translate("Wizard", "HerbASAP Profile Setup"))
        self.intro_page.setSubTitle(_translate("Wizard", "Profile Settings Wizard"))
        self.label_32.setText(_translate("Wizard", "<html><head/><body><p>Herbarium Application for Specimen Auto-Processing (HerbASAP) was developed to automate the steps required to create web ready derivative images from &quot;Raw&quot; specimen images, so called post-processing.</p><p>HerbASAP has many features, this wizard will guide you through creating a project profile to store settings specific to an imaging project. Unique profiles may be configured for separate projects. Throughout the wizard, optional features may be enabled or disabled using checkboxes.</p><p>To get started, select an example &quot;Raw&quot; image file which was captured under conditions similar to those expected.</p></body></html>"))
        self.pushButton_selectExampleImage.setWhatsThis(_translate("Wizard", "<html><head/><body><p> Select an example &quot;Raw&quot; image file which was captured under conditions similar to those expected in your imaging project.</p></body></html>"))
        self.pushButton_selectExampleImage.setText(_translate("Wizard", "Select Example Image File"))
        self.label_loadedExampleFile.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The example image file name loaded. If blank, no file has been loaded.</p></body></html>"))
        self.path_setup_page.setTitle(_translate("Wizard", "HerbASAP Profile Setup"))
        self.path_setup_page.setSubTitle(_translate("Wizard", "Input / Output Settings"))
        self.label_3.setText(_translate("Wizard", "<html><head/><body><p>HerbASAP can monitor a folder for new images, processing them as soon as they show up.</p><p>To use this feature you must select the folder to monitor and the location to save the processed image derivatives. Folder monitoring is activated by the &quot;Begin Monitoring Folder&quot; button present on the &quot;Process Images&quot; tab.</p></body></html>"))
        self.group_inputSettings.setTitle(_translate("Wizard", "Input path (the folder to monitor for new photos)    "))
        self.lineEdit_inputPath.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The path to the folder where newly captured images will be saved. In the main window, the &quot;Begin Monitoring Folder&quot; button will instruct HerbASAP to monitor this folder for new images, and process them as they arrive. Click the browse button to set this path.</p></body></html>"))
        self.label_6.setText(_translate("Wizard", "Folder"))
        self.pushButton_inputPath.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Calls user the dialog used to select the path to the folder where newly captured images will be saved. In the main window, the &quot;Begin Monitoring Folder&quot; button will instruct HerbASAP to monitor this folder for new images, and process them as they arrive.</p></body></html>"))
        self.pushButton_inputPath.setText(_translate("Wizard", "Browse"))
        self.group_saveProcessedJpg.setTitle(_translate("Wizard", "Save processed Images as JPG"))
        self.label_9.setText(_translate("Wizard", "Folder"))
        self.lineEdit_pathProcessedJpg.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The path to the folder where processed image derivatives formatted as JPGs should be saved. If &quot;Save processed Images as JPG&quot; is checked this path must be entered before continuing. Click the browse button to set this path.</p></body></html>"))
        self.pushButton_pathProcessedJpg.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Calls user the dialog used to select the path to the folder where processed image derivatives formatted as JPGs should be saved. If &quot;Save processed Images as JPG&quot; is checked this path must be entered before continuing.</p></body></html>"))
        self.pushButton_pathProcessedJpg.setText(_translate("Wizard", "Browse"))
        self.label_11.setText(_translate("Wizard", "Destination folder path (the location to save processed images as JPG files)"))
        self.group_keepUnalteredRaw.setTitle(_translate("Wizard", "Move unaltered original images after processing"))
        self.label_7.setText(_translate("Wizard", "Folder"))
        self.lineEdit_pathUnalteredRaw.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The path to the folder where unprocessed original images will be moved after processing. If &quot;Move unaltered original images after processing&quot; is checked, this path must be entered before continuing. Click the browse button to set this path.</p></body></html>"))
        self.pushButton_pathUnalteredRaw.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Calls user the dialog used to select the path to the folder where unprocessed original images will be moved after processing. If &quot;Move unaltered original images after processing&quot; is checked, this path must be entered before continuing.</p></body></html>"))
        self.pushButton_pathUnalteredRaw.setText(_translate("Wizard", "Browse"))
        self.label_4.setText(_translate("Wizard", "Destination folder path (the location to save unprocessed archive format images)"))
        self.group_saveProcessedTIFF.setTitle(_translate("Wizard", "Save processed Images as TIFF"))
        self.lineEdit_pathProcessedTIFF.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The path to the folder where processed image derivatives formatted as TIFF should be saved. If &quot;Save processed Images as TIFF&quot; is checked this path must be entered before continuing. Click the browse button to set this path.</p></body></html>"))
        self.label_8.setText(_translate("Wizard", "Folder"))
        self.pushButton_pathProcessedTIFF.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Calls user the dialog used to select the path to the folder where processed image derivatives formatted as TIFFs should be saved. If &quot;Save processed Images as TIFF&quot; is checked this path must be entered before continuing.</p></body></html>"))
        self.pushButton_pathProcessedTIFF.setText(_translate("Wizard", "Browse"))
        self.label_5.setText(_translate("Wizard", "Destination folder path (the location to save processed images as TIFF files)"))
        self.bcRead_setup_page.setTitle(_translate("Wizard", "HerbASAP Profile Setup"))
        self.bcRead_setup_page.setSubTitle(_translate("Wizard", "File Naming by Barcode / DataMatrix Value"))
        self.label_16.setText(_translate("Wizard", "<html><head/><body><p>HerbASAP can name processed image derivatives based on catalog numbers found as barcodes or data matrices in the input image. If multiple distinct codes are found in an image, a copy is saved for each code.</p><p>Undesired or partial reads are filtered using &quot;regular expression&quot; (regex) patterns. To use this feature you\'ll need to enter details concerning the expected catalog number. Use the &quot;Preview&quot; text to view the type of pattern expected based on your inputs.</p><p>- Decoder backend determines what underlying software will be used to decode values in the image. Barcodes should be decoded using &quot;zbar.&quot; Data matrices should be decoded using &quot;libdmtx.&quot;</p><p>- Multiple patterns can used simultaneously. </p><p>- Using an empty list of patterns will result in all values being acceptable.</p></body></html>"))
        self.group_barcodeDetection.setTitle(_translate("Wizard", "Barcode detection"))
        self.group_renameByBarcode.setTitle(_translate("Wizard", "Rename images by barcode number"))
        self.label_catalogNumberPrefix.setText(_translate("Wizard", "Catalog Number Prefix"))
        self.label_25.setText(_translate("Wizard", "Decoder backend "))
        self.label_dupNamingPolicy.setText(_translate("Wizard", "Duplicate naming policy"))
        self.lineEdit_catalogNumberPrefix.setPlaceholderText(_translate("Wizard", "ABCD"))
        self.toolButton_removePattern.setWhatsThis(_translate("Wizard", "<html><head/><body><p>If a pattern is selected in the list, removes it from the list of acceptable patterns.</p></body></html>"))
        self.toolButton_removePattern.setText(_translate("Wizard", "Remove Selected Pattern"))
        self.listWidget_patterns.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The list of acceptable patterns to be used in this profile. The &quot;Save Current Pattern&quot; button adds the current pattern to this list. The &quot;Remove Selected Patter&quot; button removes the pattern which is selected inside the list. Advanced users may edit patterns directly within this list.</p></body></html>"))
        self.label_dupPreviewDisplay.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Based on the inputs above, an example of the type of code your pattern will detect.</p></body></html>"))
        self.label_dupPreview.setText(_translate("Wizard", "Preview"))
        self.comboBox_dupNamingPolicy.setWhatsThis(_translate("Wizard", "<html><head/><body><p>How to handle naming when the file name exists in the destination folder.</p></body></html>"))
        self.comboBox_dupNamingPolicy.setItemText(0, _translate("Wizard", "LOWER case letter"))
        self.comboBox_dupNamingPolicy.setItemText(1, _translate("Wizard", "UPPER case letter"))
        self.comboBox_dupNamingPolicy.setItemText(2, _translate("Wizard", "Number with underscore"))
        self.comboBox_dupNamingPolicy.setItemText(3, _translate("Wizard", "OVERWRITE original"))
        self.label_28.setText(_translate("Wizard", "barcode regex patterns"))
        self.comboBox_bcBackend.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Decoder backend determines what underlying software will be used to decode values in the image. Barcodes should be decoded using &quot;zbar.&quot; Data matrices should be decoded using &quot;libdmtx.&quot;</p></body></html>"))
        self.comboBox_bcBackend.setItemText(0, _translate("Wizard", "libdmtx"))
        self.comboBox_bcBackend.setItemText(1, _translate("Wizard", "zbar"))
        self.label_digits.setText(_translate("Wizard", "Digits"))
        self.toolButton_addPattern.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Adds the current pattern to this list of acceptable barcode regex patterns to be used for this profile.</p></body></html>"))
        self.toolButton_addPattern.setText(_translate("Wizard", "Save Current Pattern"))
        self.pushButton_testbcRead.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Test barcode / datamatrix reading functions on the loaded example image. This test only returns the patterns saved in the &quot;barcode regex patterns&quot; list. Running this test while the list is empty will add a completely permissive pattern to the &quot;barcode regext patterns list.&quot; A list of the results from the test are displayed to the right.</p></body></html>"))
        self.pushButton_testbcRead.setText(_translate("Wizard", "Test Barcode / DataMatrix Reading"))
        self.blurDetect_setup_page.setTitle(_translate("Wizard", "HerbASAP Profile Setup"))
        self.blurDetect_setup_page.setSubTitle(_translate("Wizard", "Blur Detection"))
        self.label_18.setText(_translate("Wizard", "<html><head/><body><p>HerbASAP can to a limited degree, verify that images are in focus. </p><p>To do this it calculates the variance of the Laplace Operator (Laplacian) for the image. The Laplacian is normalized using the image variance to account for image &quot;busyness&quot; (e.g., dissected leaves as compared to simple leaves). If the normalized Laplacian of an image being processed is lower than the threshold value, a notice dialog will be provided. If you are unsure what threshold value to use, the default 0.045 is a good starting point. The threshold value may be changed later.</p><p>- Lower values are more blur tolerant.</p></body></html>"))
        self.pushButton_testBlurDetection.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Test blur detection functions on the loaded example image. The results from the test are displayed to the right, including the normalized Laplacian of the example image.</p></body></html>"))
        self.pushButton_testBlurDetection.setText(_translate("Wizard", "Test Blur Detection"))
        self.checkBox_blurDetection.setText(_translate("Wizard", "Check images for blur"))
        self.doubleSpinBox_blurThreshold.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The threshold value which defines &quot;blurry&quot; and &quot;not blurry.&quot; Lower values are more blur tolerant. If you are not sure what value to use, the default 0.045 is a good place to start. This value may be edited later.</p></body></html>"))
        self.label_13.setText(_translate("Wizard", "Laplacian threshold"))
        self.ccRead_setup_page1.setTitle(_translate("Wizard", "HerbASAP Profile Setup"))
        self.ccRead_setup_page1.setSubTitle(_translate("Wizard", "Color Reference Chart Detection Setup"))
        self.pushButton_testCRCDetection.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Test CRC detection functions on the loaded example image. The results are displayed in a user dialog box for verification.</p></body></html>"))
        self.pushButton_testCRCDetection.setText(_translate("Wizard", "Test CRC Detection"))
        self.label_24.setText(_translate("Wizard", "Draw a box over the CRC in the frame below"))
        self.comboBox_crcType.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The model name of the color reference chart (CRC). This determines which model is used to detect the CRC, and the real world measurements of the internal reference color patch sizes, necesarry for scale determination.</p></body></html>"))
        self.comboBox_crcType.setItemText(0, _translate("Wizard", "CameraTrax 24 ColorCard (2\" x 3\")"))
        self.comboBox_crcType.setItemText(1, _translate("Wizard", "ISA ColorGauge Nano"))
        self.comboBox_crcType.setItemText(2, _translate("Wizard", "Tiffen / Kodak Q-13  (8\")"))
        self.comboBox_crcType.setItemText(3, _translate("Wizard", "X-Rite ColorChecker Passport"))
        self.comboBox_crcType.setItemText(4, _translate("Wizard", "X-Rite ColorChecker Classic"))
        self.label_26.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The model name of the color reference chart (CRC). This determines which model is used to detect the CRC, and the real world measurements of the internal reference color patch sizes, necesarry for scale determination.</p></body></html>"))
        self.label_26.setText(_translate("Wizard", "Color Reference Chart Type"))
        self.pushButton_selectExampleImage_1.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Select an example &quot;Raw&quot; image file which was captured under conditions similar to those expected in your imaging project.</p></body></html>"))
        self.pushButton_selectExampleImage_1.setText(_translate("Wizard", "Select Example Image File"))
        self.crc_canvas_cont.setWhatsThis(_translate("Wizard", "<html><head/><body><p>If an example image file has been loaded, it should be displayed here. It is not a problem if the image is displayed upside down. Use this image to draw a box the approximate size of the CRC. The position of the box is not relevant, but the size should be as close precise as possible. The size of this box is used to set the partition size used for CRC location determination.</p></body></html>"))
        self.label_33.setText(_translate("Wizard", "<html><head/><body><p>HerbASAP has several features which depend the presence of a color reference chart (CRC).</p><p>CRC location is determined using the methods described by Ledesma et al. 2019. To use these features, you must select which CRC type is expected and draw a box the approximate size of the CRC (anywhere) in the image. The box is used to set the window size to consider for region proposals.</p></body></html>"))
        self.label_loadedExampleFile_1.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The example image file name loaded. If blank, no file has been loaded.</p></body></html>"))
        self.ccRead_setup_page2.setTitle(_translate("Wizard", "HerbASAP Profile Setup"))
        self.ccRead_setup_page2.setSubTitle(_translate("Wizard", "Color Reference Chart Features"))
        self.label_19.setText(_translate("Wizard", "<html><head/><body><p>HerbASAP has several features which depend the presence of a color reference chart (CRC).</p><p>To use these features, you must have succeeeded the test on the previous page (pressing the &quot;back&quot; button will not clear progress).</p><p>- Image scale determination: A pixel to mm ratio is determined using the internal area of CRC color patches. This ratio is annotated in the metadata of the derivative images. <span style=\" font-weight:600;\">Assumes CRC is flat on the focal surface.</span></p><p>- Image rotation: derivative images can be rotated to place the CRC a the specified position (e.g., &quot;Lower Right&quot;).</p><p>- White balance: The whitest color patch of the CRC is used as a point reference for white balanceing image derivatives.</p></body></html>"))
        self.pushButton_test_scaleDet.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Test scale determination functions on the loaded example image. The results from the test are displayed to the right, scale may be manually verified. <span style=\" font-weight:600;\">Assumes correct CRC model is selected, and it is flat on the focal surface.</span></p></body></html>"))
        self.pushButton_test_scaleDet.setText(_translate("Wizard", "Test Scale Determination"))
        self.pushButton_test_whiteBalance.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Test white balance functions on the loaded example image. The results are the average RGB values from the whitest color patch detected in the CRC and are displayed to the right.</p></body></html>"))
        self.pushButton_test_whiteBalance.setText(_translate("Wizard", "Test White Balance"))
        self.checkBox_scaleDetermination.setWhatsThis(_translate("Wizard", "<html><head/><body><p>A pixel to mm ratio may be determined using the internal area of CRC color patches. This ratio is annotated in the metadata of the derivative images. The ratio may be useful for future studies which need to compare measurements from many images. <span style=\" font-weight:600;\">Assumes CRC is flat on the focal surface.</span></p></body></html>"))
        self.checkBox_scaleDetermination.setText(_translate("Wizard", "Determine image scale using known color patch sizes"))
        self.checkBox_performWhiteBalance.setWhatsThis(_translate("Wizard", "<html><head/><body><p><br/></p></body></html>"))
        self.checkBox_performWhiteBalance.setText(_translate("Wizard", "Perform white balance using color checker"))
        self.group_verifyRotation.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Derivative images may be rotated to place the CRC a the specified position (e.g., &quot;Lower Right&quot;). This can be used to verify / correct orientation. If the CRC is properly located, the image is rotated such that the CRC is in the specified position. <span style=\" font-weight:600;\">Assumes the CRC is in a fixed position in the imaging apparatus.</span></p></body></html>"))
        self.group_verifyRotation.setTitle(_translate("Wizard", "Rotate image, placing CRC in specific position"))
        self.label_colorCheckerPosition.setText(_translate("Wizard", "Desired CRC Position"))
        self.comboBox_colorCheckerPosition.setItemText(0, _translate("Wizard", "Upper right"))
        self.comboBox_colorCheckerPosition.setItemText(1, _translate("Wizard", "Lower right"))
        self.comboBox_colorCheckerPosition.setItemText(2, _translate("Wizard", "Lower left"))
        self.comboBox_colorCheckerPosition.setItemText(3, _translate("Wizard", "Upper left"))
        self.eqRead_setup_page.setTitle(_translate("Wizard", "HerbASAP Profile Setup"))
        self.eqRead_setup_page.setSubTitle(_translate("Wizard", "Distortion Corrections"))
        self.label_21.setText(_translate("Wizard", "<html><head/><body><p>HerbASAP can correct for equipment based distortions. </p><p>Lens distortions and chromatic aberrations can be corrected in image derivative. Corrections are performed using the &quot;Lensfunpy&quot; library, a python wrapper for &quot;Lensfun.&quot; To use this feature, an approximate focal distance (i.e., distance from lens to subject) needs to be set. It is not considered necessary to adjust this value following <span style=\" font-style:italic;\">minor</span> modifications to the imaging apparatus.</p></body></html>"))
        self.group_equipmentDetection.setTitle(_translate("Wizard", "Equipment detection"))
        self.label_2.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The approximate focal distance (i.e., distance from lens to subject) in cm. It is not necessary to edit this value following <span style=\" font-style:italic;\">minor</span> modifications to the imaging apparatus.</p></body></html>"))
        self.label_2.setText(_translate("Wizard", "Approximate focal distance"))
        self.doubleSpinBox_focalDistance.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The approximate focal distance (i.e., distance from lens to subject) in cm. It is not necessary to edit this value following <span style=\" font-style:italic;\">minor</span> modifications to the imaging apparatus.</p></body></html>"))
        self.doubleSpinBox_focalDistance.setSuffix(_translate("Wizard", "cm"))
        self.checkBox_lensCorrection.setText(_translate("Wizard", "Perform Lens corrections"))
        self.pushButton_testeqRead.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Test equipment correction functions on the loaded example image. A correction matrix is generated based on the equipment detected from the example image. The results, and the detected equipment are displayed to the right. Use these results to verify the equipment was properly detected.</p></body></html>"))
        self.pushButton_testeqRead.setText(_translate("Wizard", "Test Equipment Corrections"))
        self.label_eqRead_results.setWhatsThis(_translate("Wizard", "<html><head/><body><p> The &quot;Test Equipment Corrections&quot; results, and the detected equipment are displayed here. Use these details to verify the equipment was properly detected.</p></body></html>"))
        self.metaRead_setup_page.setTitle(_translate("Wizard", "HerbASAP Profile Setup"))
        self.metaRead_setup_page.setSubTitle(_translate("Wizard", "Metadata"))
        self.label_23.setText(_translate("Wizard", "HerbASAP stores details concerning image processing as metadata in the image derivatives. Additional details concerning the collection may be specified here."))
        self.label_copywriteLicense.setText(_translate("Wizard", "Copywrite License:"))
        self.label_contactName.setText(_translate("Wizard", "Contact name:"))
        self.plainTextEdit_collectionName.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The collection name, which will be applied to the userComments section of matadata in processed image derivatives.</p></body></html>"))
        self.label_collectionName.setText(_translate("Wizard", "Collection name:"))
        self.label_contactEmail.setText(_translate("Wizard", "Contact Email:"))
        self.plainTextEdit_collectionURL.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The collection URL, which will be applied to the userComments section of matadata in processed image derivatives.</p></body></html>"))
        self.plainTextEdit_contactName.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The primary contact name for the collection, which will be applied to the userComments section of matadata in processed image derivatives.</p></body></html>"))
        self.plainTextEdit_contactEmail.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The primary contact Email address for the collection, which will be applied to the userComments section of matadata in processed image derivatives.</p></body></html>"))
        self.plainTextEdit_copywriteLicense.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Copywrite license which this image will be released under. This will be applied to the userComments section of matadata in processed image derivatives.</p></body></html>"))
        self.label_collectionIURL.setText(_translate("Wizard", "Collection URL:"))
        self.final_page.setTitle(_translate("Wizard", "HerbASAP Profile Setup"))
        self.final_page.setSubTitle(_translate("Wizard", "Save Completed Profile"))
        self.lineEdit_profileName.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The name to store this setting profile as.</p></body></html>"))
        self.label_14.setText(_translate("Wizard", "Profile details:"))
        self.label_profileDetails.setWhatsThis(_translate("Wizard", "<html><head/><body><p>The full details of the profile generated through this wizard.</p></body></html>"))
        self.label_27.setText(_translate("Wizard", "<html><head/><body><p>HerbASAP will save these settings as a profile. Profiles may be selected or edited at any time in the &quot;Settings&quot; tab.</p></body></html>"))
        self.label.setText(_translate("Wizard", "Profile name: "))
        self.pushButton_saveProfile.setWhatsThis(_translate("Wizard", "<html><head/><body><p>Saves the current settings profile (and selects it in HerbASAP).</p></body></html>"))
        self.pushButton_saveProfile.setText(_translate("Wizard", "Save Profile"))
        self.label_nameAvailable.setWhatsThis(_translate("Wizard", "<html><head/><body><p><span style=\" font-style:normal;\">If the entered profile name is unique (on this system).</span></p></body></html>"))
